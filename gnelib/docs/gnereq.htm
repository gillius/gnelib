<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>Requirements Document for GNE</title>
</head>

<body>

<p align="center"><font size="5"><b>Requirements Document for GNE<br>
</b></font><font size="4"><b>First Draft, April 20, 2001<br>
</b></font><font size="2">For information on GNE and Itana, visit:<br>
http://www.rit.edu/~jpw9607/</font></p>

<p><b>What will GNE become?</b></p>

<p>GNE, or the Game Networking Engine, will be a cross-platform C++
networking library with an API specifically addressing the needs
of game networking.</p>

<p><b>What platforms will GNE support?</b></p>

<p>GNE should definitely be compatible &quot;out-of-the-box&quot;
with the following operating systems:</p>

<ul>
    <li>Windows 95/98/Me/NT4/2k</li>
    <li>Linux</li>
</ul>

<p>In addition, GNE should support any UNIX system out-of-the-box
if at all possible, however because I only have access directly
to the above two operating systems I can only guarantee support
for those two. I have an account on a Solaris 8 machine that I
can use from time to time to test GNE on.</p>

<p><b>How will GNE achieve its portability?</b></p>

<p>GNE should use portable ANSI C++ code whenever possible. All
non-portable code will be abstracted behind some interface or
other library. A single source file should never contain platform-independant
and platform-specific implementations, only one or the other.</p>

<p>GNE will use the following libraries as a foundation:</p>

<ul>
    <li>HawkNL, a networking library that works under Windows,
        Linux, and Solaris. It also uses pthreads for multi-threading.
        The library can be found at: http://www.hawksoft.com/hawknl/</li>
    <li>pthreads, the POSIX threads library, to provide support
        for threading under Windows and UNIX. The implementation
        of pthreads under Windows will be the same as what HawkNL
        uses under windows can can be found at: http://sources.redhat.com/pthreads-win32/</li>
</ul>

<p><b>What are GNE's features?</b></p>

<ul>
    <li>Provide a C++ class interface for threads, mutexes, and
        condition variables.</li>
    <li>Provide a C++ class interface for packets, from which the
        user is expected to derive their game-specific packet
        classes from.</li>
    <li>Provide a proper way of serializing packets in endian-independant
        format. Most of this functionality will be handled by
        HawkNL.</li>
    <li>Provide the user with a base client/server protocol
        framework, handling these specific events, common to
        virtually any game:<ul>
            <li>Low-level connection to the server</li>
            <li>Checking for server/client network protocol
                versions</li>
            <li>Handling text messages to be sent to all players</li>
            <li>Players entering, leaving, or timing out at any
                time (the user can restrict joining to game start
                only)</li>
        </ul>
    </li>
    <li>Provide the user an abstraction of &quot;connections&quot;
        to a server/client:<ul>
            <li>Connections where all packets arrive and arrive
                in order (packets over TCP)</li>
            <li>Connections where all packets are not guaranteed
                arrival (UDP)</li>
            <li>Connections where only some packets are
                guaranteed to arrive, although not in order (UDP
                where &quot;reliable&quot; packets have IDs that
                need to be ACK'd)</li>
        </ul>
    </li>
    <li>Provide an event-driven scheme for responding to sockets,
        which will work similarly to MFC. The user should
        overload the events they wish to respond to (onRead,
        onWrite, etc). A class will also be provided that sends a
        connection class and the event type to a C callback
        function for those who prefer that method, or for
        responding to the same event in the same way, regardless
        of the connection.</li>
    <li>Provide a framework/protocol for a server list server,
        similar to networks like battle.net or Half-Life,
        supporting multiple types of games with optional game-specific
        information. Unlike battle.net, the server list will
        simply act as a database sending a list of IP addresses,
        their game type, and the optional game-specific data.</li>
</ul>

<p><b>What projects will GNE be used in?</b></p>

<p>GNE will come with a stand-alone implementation of the list
server, and should work for most, if not all projects, since the
server will do nothing more than echo a list of IP addresses,
game names, and a game-specific data packet. Any game using GNE
should be able to use a single GNE server.</p>

<p>GNE will also come with example/test programs needed to test
all of the functionality of the library.</p>

<p>GNE will be actively used in Itana, as that is the project
that this library is being built for. You can find more
information about Itana at the same site as GNE.</p>

<p><b>How will GNE be documented?</b></p>

<p>Documention for GNE will be handled by doxygen, which will be
used to generate HTML on-line documentation from the source code.
Javadoc style comments will be used in the code to generate this
documentation. You can find out more about doxygen at:</p>

<p>http://www.stack.nl/~dimitri/doxygen/</p>

<p>In addition to this main form of documentation, this
requirements document and a UML diagram generated by Rational
Rose will be maintained. All documentation will be kept on-line
at the GNE website.</p>

<p><b>What will be the license of GNE?</b></p>

<p>At the moment I plan on releasing GNE under the GPL or the
LGPL. I am still studying both of these options.</p>
</body>
</html>
